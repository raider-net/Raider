using System;

namespace Raider.Sql.Metadata
{
	/// <summary>
	///     A simple model for a database column.
	/// </summary>
	public class DatabaseColumn
	{
		/// <summary>
		///     The database <see cref="DatabaseTable" /> or <see cref="DatabaseView" /> that contains this column.
		/// </summary>
		public DatabaseColumnObject? DatabaseColumnObject { get; set; }

		/// <summary>
		///     The column name.
		/// </summary>
		public string? Name { get; set; }

		public int OrdinalPosition { get; set; }

		/// <summary>
		///     The default constraint for the column, or <c>null</c> if none.
		/// </summary>
		public string? DefaultValue { get; set; }

		/// <summary>
		///     Indicates whether or not this column can contain <c>NULL</c> values.
		/// </summary>
		public bool IsNullable { get; set; }

		/// <summary>
		///     The database/store type of the column.
		/// </summary>
		public string? StoreType { get; set; }

		public Type? CsharpType { get; set; }

		public int CharacterMaximumLength { get; set; }

		public int Precision { get; set; }

		public int Scale { get; set; }

		public bool IsIdentity { get; set; }

		public long? IdentityStart { get; set; }

		public long? IdentityIncrement { get; set; }

		public long? LastIdentity { get; set; }

		/// <summary>
		///     The SQL expression that computes the value of the column, or <c>null</c> if this is not a computed column.
		/// </summary>
		public string? ComputedColumnSql { get; set; }

		/// <summary>
		///     Indicates when values will be generated by the database for this column, or <c>null</c> if
		///     the database will not generate values.
		/// </summary>
		public ValueGenerated? ValueGenerated { get; set; }

		public bool IsPrimaryKey { get; set; }

		public int PrimaryKeyOrdinalPosition { get; set; }

		public bool IsUniqueConstraint { get; set; }

		public bool IsForeignKey { get; set; }

		private bool built = false;
		public DatabaseColumn BuildColumn()
		{
			if (built)
				return this;

			built = true;

			if (DatabaseColumnObject == null)
				throw new ArgumentNullException(nameof(DatabaseColumnObject));
			if (string.IsNullOrWhiteSpace(Name))
				throw new ArgumentNullException(nameof(Name));

			DatabaseColumnObject.Columns.Add(this);

			return this;
		}

		public override string ToString()
		{
			return Name ?? "";
		}
	}
}
