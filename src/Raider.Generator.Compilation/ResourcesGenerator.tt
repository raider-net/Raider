<#@ template language="C#" inherits="GeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Raider.Extensions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
	SetGenerationEnvironment(this.GenerationEnvironment);
	
	string targetProject = GetParam("TargetProject");
	string nmspace = GetParam("RootNamespace");
    var resFiles = GetParam<List<Raider.Localization.ResourceFile>>("ResFiles");
    var resourcesClassName = GetParam("ResourcesClassName");
		
	StartNewFile(Path.Combine(targetProject, "Configuration"), resourcesClassName + ".cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= nmspace #>
{
	public static partial class Resources
	{
		private static ResourcesManager _resMan;
		public static ResourcesManager ResourcesManager
		{
			get
			{
				return _resMan ?? (_resMan = new ResourcesManager(typeof(<#= nmspace #>.<#= resourcesClassName #>).Assembly));
			}
		}
	}
}
<#
	
	foreach (var resFile in resFiles)
	{
		var resStructure = resFile.GetConfigurationFolderStructure(targetProject);
		var resPath = resFile.GetConfigurationFolderPath("Configuration", targetProject);
		StartNewFile(resPath, resFile.Name + "Resource.cs");
		
		int ident = 0;

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= nmspace #>
{
<#
		foreach (var parentClass in resStructure)
		{
#>
	<#= GetIdent(ident) #>public static partial class <#= parentClass #>
	<#= GetIdent(ident) #>{
<#
			ident++;
		}
		string className = resFile.Name.ToCammelCase(removeUnderscores: false);
#>
	<#= GetIdent(ident) #>public static partial class <#= className #>
	<#= GetIdent(ident) #>{
	<#= GetIdent(ident + 1) #>public static readonly System.Collections.Generic.IReadOnlyDictionary<string, System.Func<string>> Dictionary = new System.Collections.Generic.Dictionary<string, System.Func<string>>
	<#= GetIdent(ident + 1) #>{
<#
				int resCount = 0;
                foreach (var resource in resFile)
				{
					if (resource.NumericParameters.Count == 0)
					{
#>
		<#= GetIdent(ident + 1) #>{ nameof(<#= resource.Name.ToCammelCase(removeUnderscores: false) #>), () => <#= resource.Name.ToCammelCase(removeUnderscores: false) #> },
<#
					}
					else
					{
#>
		<#= GetIdent(ident + 1) #>{ nameof(<#= resource.Name.ToCammelCase(removeUnderscores: false) #>), () => <#= resource.Name.ToCammelCase(removeUnderscores: false) #>_Message },
<#
					}
				}
#>
	<#= GetIdent(ident + 1) #>};

<#
                foreach (var resource in resFile)
                {
					if (string.IsNullOrWhiteSpace(resource.Value))
					{
						throw new InvalidOperationException("Resource " + resFile.FullPath + " has invalid value for name " + resource.Name);
					}

                    if (0 < resCount)
                    {
#>

<#
                    }
#>
	<#= GetIdent(ident + 1) #>/// <summary>
<#
					var valueLines = Lines(resource.Value);
					foreach (var line in valueLines)
					{
#>
	<#= GetIdent(ident + 1) #>/// <#= Xml(line) #>
<#
					}
#>
	<#= GetIdent(ident + 1) #>/// </summary>
<#
					if (resource.NumericParameters.Any())
					{
#>
	<#= GetIdent(ident + 1) #>public static string <#= resource.Name.ToCammelCase(removeUnderscores: false) #>_Message
	<#= GetIdent(ident + 2) #>=> ResourcesManager.GetString("<#= resFile.GetResourceRelativeName(resourcesClassName) #>", "<#= resource.Name #>", "<#= string.Join(" ", valueLines) #>");
	
	<#= GetIdent(ident + 1) #>/// <summary>
<#
					valueLines = Lines(resource.Value);
					foreach (var line in valueLines)
					{
#>
	<#= GetIdent(ident + 1) #>/// <#= Xml(line) #>
<#
					}
#>
	<#= GetIdent(ident + 1) #>/// </summary>
	<#= GetIdent(ident + 1) #>public static string <#= resource.Name.ToCammelCase(removeUnderscores: false) #>(<#= List("object p", resource.NumericParameters) #>, string defaultValue = "<#= string.Join(" ", valueLines) #>")
	<#= GetIdent(ident + 2) #>=> string.Format(
	<#= GetIdent(ident + 3) #>ResourcesManager.GetString("<#= resFile.GetResourceRelativeName(resourcesClassName) #>", "<#= resource.Name #>", defaultValue),
	<#= GetIdent(ident + 3) #><#= List("p", resource.NumericParameters) #>);
<#
					}
					else
					{
#>
	<#= GetIdent(ident + 1) #>public static string <#= resource.Name.ToCammelCase(removeUnderscores: false) #>
	<#= GetIdent(ident + 2) #>=> ResourcesManager.GetString("<#= resFile.GetResourceRelativeName(resourcesClassName) #>", "<#= resource.Name #>", "<#= string.Join(" ", valueLines) #>");
<#
					}
					resCount++;
                }
#>
	<#= GetIdent(ident) #>}
<#

		for (int i = resStructure.Count - 1; 0 <= i; i--)
		{
#>
	<#= GetIdent(i) #>}
<#
		}
#>
}
<#
	}
	Process();
#>
<#+
	private string GetIdent(int count)
	{
		return GetIdent(null, count);
	}

	private string GetIdent(string baseIdent, int count)
	{
		StringBuilder sb = new StringBuilder(baseIdent ?? "");
		for (int i = 0; i < count; i++)
		{
			sb.Append("\t");
		}
		return sb.ToString();
	}

    private IEnumerable<string> Lines(string value)
    {
        return value.Split(new[] { Environment.NewLine }, StringSplitOptions.None);
    }

    private string Xml(string value)
    {
        return value.Replace("<", "&lt;").Replace(">", "&gt;");
    }

    private string List(IEnumerable<string> items)
    {
        return List(null, items);
    }

    private string List(string prefix, IEnumerable<string> items, string suffix = null)
    {
        return string.Join(", ", items.Select(i => prefix + i + suffix));
    }
#>