<#@ template language="C#" inherits="GeneratorBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Raider.Extensions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
	SetGenerationEnvironment(this.GenerationEnvironment);
	
	string targetProject = GetParam("TargetProject");
	string nmspace = GetParam("RootNamespace");
	var resFiles = GetParam<List<Raider.Localization.ResourceFile>>("ResFiles");
	
	foreach (var resFile in resFiles)
	{
		var resStructure = resFile.GetConfigurationFolderStructure(targetProject);
		var resPath = resFile.GetConfigurationFolderPath(null, targetProject);
		StartNewFile(resPath, resFile.Name + "ResourceKeys.cs");
		
		int ident = 0;

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Microsoft.Extensions.Localization;
using Raider.Extensions;
using Raider.Localization;
using System;
using System.Collections.Generic;

namespace <#= nmspace #>
{
<#
		foreach (var parentClass in resStructure)
		{
#>
	<#= GetIdent(ident) #>public partial class <#= parentClass #>
	<#= GetIdent(ident) #>{
<#
			ident++;
		}
		string className = resFile.Name.ToCammelCase(removeUnderscores: false);
		var baseName = resPath.TrimPrefix(targetProject).Replace(System.IO.Path.DirectorySeparatorChar, '.') + "." + resFile.Name;
#>
	<#= GetIdent(ident) #>public partial class <#= className #>Keys
	<#= GetIdent(ident) #>{
	<#= GetIdent(ident + 1) #>private static Lazy<IStringLocalizer> _stringLocalizer = new Lazy<IStringLocalizer>(() => Resources.Localizers.GetStringLocalizer<Resources.<#= baseName #>Keys>());

	<#= GetIdent(ident + 1) #>public static IStringLocalizer StringLocalizer => _stringLocalizer.Value;

	<#= GetIdent(ident + 1) #>public const string __BaseName = "<#= baseName #>";

<#
				int resCount = 0;
				foreach (var resource in resFile)
				{
					var resName = resource.Name.ToCammelCase(removeUnderscores: false);
					if (string.IsNullOrWhiteSpace(resource.Value))
					{
						throw new InvalidOperationException("Resource " + resFile.FullPath + " has invalid value for name " + resource.Name);
					}

					if (0 < resCount)
					{
#>

<#
					}
#>
	<#= GetIdent(ident + 1) #>public const string <#= resName #> = "<#= resource.Name #>";
<#
					if (0 < resource.NumericParameters.Count)
					{
						foreach (var numParam in resource.NumericParameters)
						{
#>
	<#= GetIdent(ident + 1) #>public const string <#= resName #>_p<#= numParam.ToCammelCase(removeUnderscores: false) #> = "<#= numParam #>";
<#
						}
					}

					if (0 < resource.StringParameters.Count)
					{
						foreach (var strParam in resource.StringParameters)
						{
#>
	<#= GetIdent(ident + 1) #>public const string <#= resName #>_p_<#= strParam.ToCammelCase(removeUnderscores: false) #> = "<#= strParam #>";
<#
						}
					}
					resCount++;
				}
		
				foreach (var resource in resFile)
				{
					var resName = resource.Name.ToCammelCase(removeUnderscores: false);
#>

	<#= GetIdent(ident + 1) #>public static string <#= resName #>__Value()
	<#= GetIdent(ident + 1) #>	=> StringLocalizer[Resources.<#= baseName #>Keys.<#= resName #>]!;
<#

					if (0 < resource.NumericParameters.Count)
					{
#>

	<#= GetIdent(ident + 1) #>public static string <#= resName #>__Value(object <#= string.Join(", object ", resource.NumericParameters.Select(x => x.ToCammelCase(removeUnderscores: false).FirstToLower())) #>)
	<#= GetIdent(ident + 1) #>{
	<#= GetIdent(ident + 1) #>	string res = StringLocalizer[Resources.<#= baseName #>Keys.<#= resName #>]!;
	<#= GetIdent(ident + 1) #>	return res.ReplacePlaceholders(new Dictionary<string, object?>
	<#= GetIdent(ident + 1) #>		{
<#
						foreach (var numParam in resource.NumericParameters)
						{
#>
	<#= GetIdent(ident + 1) #>			{ Resources.<#= baseName #>Keys.<#= resName #>_p<#= numParam.ToCammelCase(removeUnderscores: false) #>, <#= numParam.ToCammelCase(removeUnderscores: false).FirstToLower() #> },
<#
						}
#>
	<#= GetIdent(ident + 1) #>		});
	<#= GetIdent(ident + 1) #>}
<#
					}

					if (0 < resource.StringParameters.Count)
					{
#>

	<#= GetIdent(ident + 1) #>public static string <#= resName #>__Value(object <#= string.Join(", object ", resource.StringParameters.Select(x => x.ToCammelCase(removeUnderscores: false).FirstToLower())) #>)
	<#= GetIdent(ident + 1) #>{
	<#= GetIdent(ident + 1) #>	string res = StringLocalizer[Resources.<#= baseName #>Keys.<#= resName #>]!;
	<#= GetIdent(ident + 1) #>	return res.ReplacePlaceholders(new Dictionary<string, object?>
	<#= GetIdent(ident + 1) #>		{
<#
						foreach (var strParam in resource.StringParameters)
						{
#>
	<#= GetIdent(ident + 1) #>			{ Resources.<#= baseName #>Keys.<#= resName #>_p_<#= strParam.ToCammelCase(removeUnderscores: false) #>, <#= strParam.ToCammelCase(removeUnderscores: false).FirstToLower() #> },
<#
						}
#>
	<#= GetIdent(ident + 1) #>		});
	<#= GetIdent(ident + 1) #>}
<#
					}
					resCount++;
				}
#>
	<#= GetIdent(ident) #>}

	<#= GetIdent(ident) #>public partial class <#= className #>LocalizerFactory : ResourceLocalizer<<#= resPath.TrimPrefix(targetProject).Replace(System.IO.Path.DirectorySeparatorChar, '.') #>.<#= resFile.Name #>Keys>
	<#= GetIdent(ident) #>{
	<#= GetIdent(ident) #>	public <#= className #>LocalizerFactory(IServiceProvider serviceProvider)
	<#= GetIdent(ident) #>		: base(serviceProvider,
	<#= GetIdent(ident) #>			<#= className #>Keys.__BaseName,
	<#= GetIdent(ident) #>			new System.Reflection.AssemblyName(typeof(<#= className #>LocalizerFactory).Assembly.FullName!).Name!)
	<#= GetIdent(ident) #>	{
	<#= GetIdent(ident) #>	}
	<#= GetIdent(ident) #>}
<#

		for (int i = resStructure.Count - 1; 0 <= i; i--)
		{
#>
	<#= GetIdent(i) #>}
<#
		}
#>
}
<#
	}
	Process();
#>
<#+
	private string GetIdent(int count)
	{
		return GetIdent(null, count);
	}

	private string GetIdent(string baseIdent, int count)
	{
		StringBuilder sb = new StringBuilder(baseIdent ?? "");
		for (int i = 0; i < count; i++)
		{
			sb.Append("\t");
		}
		return sb.ToString();
	}

	private IEnumerable<string> Lines(string value)
	{
		return value.Split(new[] { Environment.NewLine }, StringSplitOptions.None);
	}

	private string Xml(string value)
	{
		return value.Replace("<", "&lt;").Replace(">", "&gt;");
	}

	private string List(IEnumerable<string> items)
	{
		return List(null, items);
	}

	private string List(string prefix, IEnumerable<string> items, string suffix = null)
	{
		return string.Join(", ", items.Select(i => prefix + i + suffix));
	}
#>